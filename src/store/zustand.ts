import { GameState, Suit, Team } from '@/globals';
import { CardModel } from '@/models/CardModel';
import { GameModel } from '@/models/GameModel';
import { HandModel } from '@/models/HandModel';
import { PlayerModel } from '@/models/PlayerModel';
import { create } from 'zustand';

interface GameStore {
    gameModel: GameModel,
    roundTarneeb: Suit,
    proTricksWon: number,
    proTricksLost: number,
    roundBet: number,
    bettingTeam: Team,
    gameState: GameState,
    proGamesWon: number,
    proGamesLost: number,
    cards: CardModel[],
    player1Card: CardModel,
    player2Card: CardModel,
    player3Card: CardModel,
    player4Card: CardModel,
    player1CardDown: boolean,
    player2CardDown: boolean,
    player3CardDown: boolean,
    player4CardDown: boolean,
    proGameScore: number,
    antiGameScore: number,
    setRoundTarneeb(newTarneeb: Suit): void,
    changeProTricksWon(by: number): any,
    resetProTricksWon(): any,
    changeProTricksLost(by: number): any,
    resetProTricksLost(): any,
    setRoundBet(newRoundBet: number): void,
    setBettingTeam(newBettingTeam: Team): void,
    setGameState(newGameState: GameState): void,
    increaseProGamesWon(): any,
    resetProGamesWon(): any,
    increaseProGamesLost(): any,
    resetProGamesLost(): any,
    setCards(newCards: CardModel[]): void,
    clearCards(): any,
    setPlayer1Card(newCard: CardModel): void,
    setPlayer2Card(newCard: CardModel): void,
    setPlayer3Card(newCard: CardModel): void,
    setPlayer4Card(newCard: CardModel): void,
    setPlayer1CardDown(newValue: boolean): void,
    setPlayer2CardDown(newValue: boolean): void,
    setPlayer3CardDown(newValue: boolean): void,
    setPlayer4CardDown(newValue: boolean): void,
    changeProGameScore(by: number): void,
    changeAntiGameScore(by: number): void,
}

let player1Model: PlayerModel = new PlayerModel(new HandModel(1), Team.Pro, 0, 1);
let player2Model: PlayerModel = new PlayerModel(new HandModel(2), Team.Anti, 0, 2);
let player3Model: PlayerModel = new PlayerModel(new HandModel(3), Team.Pro, 0, 3);
let player4Model: PlayerModel = new PlayerModel(new HandModel(4), Team.Anti, 0, 4);

export const useGameStore = create<GameStore>()((set) => ({
    gameModel: new GameModel([player1Model, player2Model, player3Model, player4Model]),
    roundTarneeb: Suit.Club,
    proTricksWon: 0,
    proTricksLost: 0,
    roundBet: 0,
    bettingTeam: Team.Pro,
    gameState: GameState.Initial,
    proGamesWon: 0,
    proGamesLost: 0,
    cards: [],
    player1Card: new CardModel(2, Suit.Spade),
    player2Card: new CardModel(2, Suit.Club),
    player3Card: new CardModel(2, Suit.Heart),
    player4Card: new CardModel(2, Suit.Diamond),
    player1CardDown: false,
    player2CardDown: false,
    player3CardDown: false,
    player4CardDown: false,
    proGameScore: 0,
    antiGameScore: 0,
    setRoundTarneeb: (newTarneeb: Suit) => set((state) => ({ roundTarneeb: newTarneeb })),
    changeProTricksWon: (by: number) => set((state) => ({ proTricksWon: state.proTricksWon + by})),
    resetProTricksWon: () => set((state) => ({ proTricksWon: 0 })),
    changeProTricksLost: (by: number) => set((state) => ({ proTricksLost: state.proTricksLost + by })),
    resetProTricksLost: () => set((state) => ({ proTricksLost: 0 })),
    setRoundBet: (newRoundBet: number) => set((state) => ({ roundBet: newRoundBet })),
    setBettingTeam: (newBettingTeam: Team) => set((state) => ({ bettingTeam: newBettingTeam })),
    setGameState: (newGameState: GameState) => set((state) => ({ gameState: newGameState })),
    increaseProGamesWon: () => set((state) => ({proGamesWon: state.proGamesWon + 1})),
    resetProGamesWon: () => set((state) => ({ proGamesWon: 0 })),
    increaseProGamesLost: () => set((state) => ({proGamesLost: state.proGamesLost + 1})),
    resetProGamesLost: () => set((state) => ({ proGamesLost: 0 })),
    setCards: (newCards: CardModel[]) => set((state) => ({ cards: newCards })),
    clearCards: () => set((state) => ({ cards: [] })),
    setPlayer1Card: (newCard: CardModel) => set((state) => ({ player1Card: newCard })),
    setPlayer2Card: (newCard: CardModel) => set((state) => ({ player2Card: newCard })),
    setPlayer3Card: (newCard: CardModel) => set((state) => ({ player3Card: newCard })),
    setPlayer4Card: (newCard: CardModel) => set((state) => ({ player4Card: newCard })),
    setPlayer1CardDown: (newValue: boolean) => set((state) => ({ player1CardDown: newValue })),
    setPlayer2CardDown: (newValue: boolean) => set((state) => ({ player2CardDown: newValue })),
    setPlayer3CardDown: (newValue: boolean) => set((state) => ({ player3CardDown: newValue })),
    setPlayer4CardDown: (newValue: boolean) => set((state) => ({ player4CardDown: newValue })),
    changeProGameScore: (by: number) => set((state) => ({proGameScore: state.proGameScore + by})),
    changeAntiGameScore: (by: number) => set((state) => ({ antiGameScore: state.antiGameScore + by })),
  }));